@model Nop.Plugin.Widgets.BasicPlugins.Models.Product
<!DOCTYPE html>
<html>
<head>
    <title>Create Product</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">
    @*<link href="~/Plugins/Widgets.BasicPlugins/Content/bootstrap.min.css" rel="stylesheet" />*@
    @*  <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
    <link href="https://raw.githack.com/ttskch/select2-bootstrap4-theme/master/dist/select2-bootstrap4.css" rel="stylesheet">*@
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2022.2.510/styles/kendo.common.min.css">
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2022.2.510/styles/kendo.default.min.css">
    <link rel="stylesheet" href="https://kendo.cdn.telerik.com/2022.2.510/styles/kendo.mobile.all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/themes/base/jquery-ui.min.css" integrity="sha512-ELV+xyi8IhEApPS/pSj66+Jiw+sOT1Mqkzlh8ExXihe4zfqbWkxPRi8wptXIO9g73FSlhmquFlUOuMSoXz5IRw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tag-editor/1.0.20/jquery.tag-editor.css" integrity="sha512-FILySSY3nAOje2KkIZUxajmYnEDpcPsSjvTSBlo9jHsMXbtNongJIh75cRp9jsG5R1GYO8fYRWQ66FLbSZfTGA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        /* Styling for the accordion */
        .accordion {
            border: 1px solid #ccc;
            border-radius: 4px;
            margin-bottom: 10px;
        }

        .accordion-header {
            background-color: #f1f1f1;
            padding: 10px;
            cursor: pointer;
        }

            .accordion-header:hover {
                background-color: #ddd;
            }

            .accordion-header.active {
                background-color: #ccc;
            }

        .accordion-content {
            padding: 10px;
            /* display: none;*/
        }

            .accordion-content.show {
                display: block;
            }

        .row {
            /* display: block !important;*/
            width: 100%;
        }

        .tox-statusbar__branding {
            display: none;
        }

        .required:after {
            content: " *";
            color: red;
        }


        .tag-editor {
            padding: 0.375rem 0.75rem;
            border: 1px solid #ced4da !important;
        }

        .testClass input {
            pointer-events: none;
        }

    </style>

</head>
<body>
    <div class="container" style="padding: 10px; max-width:1600px;">

        @using (Html.BeginForm("AddProduct", "DemoProduct", FormMethod.Post, new { @class = "form-horizontal" }))
        {

            <div class="row">
                <div class="col-md-6">
                    <h4>Add product </h4>
                </div>
               @* <div class="col-md-5">
                </div>*@
                <div class="col-md-6">
                    <a href='@Url.Action("ProductList", "DemoProduct")' class="btn btn-primary text-center" style="float:right; margin-left:15px;">Back to Product List</a>
                    <button type="submit" class="btn btn-primary text-center" style="float:right; margin-left: 15px;" value="saveedit" name="Command">Save and Continue Edit</button>
                    <button type="submit" class="btn btn-primary text-center" style="float:right;" value="save" name="Command">Save</button>
                </div>

            </div>
            @*<div class="row">
                <div class="col-md-3">
                    <input type="checkbox" id="togbutton" checked data-toggle="toggle" data-on="Advanced" data-off="Basic" data-onstyle="primary" data-offstyle="light">
                </div>
            </div>*@
            <div class="form-group">
                <div style="text-align:center;">
                    @if (ViewBag.SuccessMessage != null)
                    {
                        <label style="color:red;">@ViewBag.SuccessMessage</label>
                    }
                </div>
            </div>
            <div class="accordion">
                <div class="accordion-header" onclick="toggleAccordion(event)"><i class="fa fa-info panel-icon"></i>&nbsp; Product Info</div>
                <div class="accordion-content">
                   
                    <div class="row mb-2">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.ProductName, new { @class = "required" })
                        </div>
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.ProductName, new { @id = "ProductName", @class = "form-control",@autocomplete="off",@onkeydown="return Checkvalidate();"})
                            @Html.ValidationMessageFor(m => m.ProductName, "", new { @class = "text-danger pnameerror" })
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.ShortDescription, new {  })
                        </div>
                        <div class="col-md-10">
                            @Html.TextAreaFor(m => m.ShortDescription, new { @id = "ShortDescription", @class = "form-control",@row="2" })
                            @Html.ValidationMessageFor(m => m.ShortDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.FullDescription, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(m => m.FullDescription, new { @id = "FullDescription", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.FullDescription, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.SKU, new { @class = "col-md-2 required" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.SKU, new { @id = "SKU", @class = "form-control" ,@autocomplete="off",@maxlength="20"})
                            @Html.ValidationMessageFor(m => m.SKU, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.CategoryID, new { @class = "col-md-2 required" })
                        <div class="col-md-10">
                            @Html.ListBoxFor(model => model.CategoryID, Model.Categories, new {@class="form-control select2 select2-hidden-accessible" ,@style="width: 100%;"})
                            @Html.ValidationMessageFor(m => m.CategoryID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.IsPublished)
                        </div>
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.CheckBoxFor(m => m.IsPublished)
                            </div>
                        </div>
                    </div>
                    <div class="productaccordian" style="display:none;">
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Producttags, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Producttags, new { @id = "Producttags", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Producttags, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.GTIN, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.GTIN, new { @id = "GTIN", @class = "form-control" ,@maxlength="13"})
                                @Html.ValidationMessageFor(m => m.GTIN, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.ManufacturerPartnumber, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.ManufacturerPartnumber, new { @id = "ManufacturerPartnumber", @class = "form-control" ,@maxlength="18"})
                                @Html.ValidationMessageFor(m => m.ManufacturerPartnumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsShowOnHomepage)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsShowOnHomepage)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2" id="DisplayorderID" style="display: none;">
                            @Html.LabelFor(m => m.Displayorder, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Displayorder, new { @id = "Displayorder", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)"})
                                @Html.ValidationMessageFor(m => m.Displayorder, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.ProductType, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.ProductType,Model.ProductTypes,new{@class = "form-control"})
                                @Html.ValidationMessageFor(m => m.ProductType, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.ProductTemplate, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.ProductTemplate,Model.ProductTemplates,new{@class = "form-control"})
                                @Html.ValidationMessageFor(m => m.ProductTemplate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @*<div class="row mb-2">
                    <div class="col-md-2">
                    @Html.LabelFor(m => m.IsRequireotherproducts)
                    </div>
                    <div class="col-md-10">
                    <div class="checkbox">
                    @Html.CheckBoxFor(m => m.IsRequireotherproducts)
                    </div>
                    </div>
                    </div>*@
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsAllowuserreviews)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsAllowuserreviews)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Availablestartdate, new { @class = "col-md-2" })
                            <div class="k-d-flex">
                                <div class="k-w-300">
                                    <div class="col-md-12 testClass">
                                        @Html.TextBoxFor(m => m.sAvailablestartdate,new { @class = "form-control datetimepicker",@onchange="startChange()"})
                                        @Html.ValidationMessageFor(m => m.Availablestartdate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Availableenddate, new { @class = "col-md-2" })
                            <div class="k-d-flex">
                                <div class="k-w-300">
                                    <div class="col-md-12 testClass">
                                        @Html.TextBoxFor(m => m.sAvailableenddate,new { @class = "form-control datetimepicker",@onchange="endChange()"})
                                        @Html.ValidationMessageFor(m => m.Availableenddate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsMarkasnew)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsMarkasnew)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2 marknews testClass">
                            @Html.LabelFor(m => m.MarkasnewStartdate, new { @class = "col-md-2" })
                            <div class="k-d-flex">
                                <div class="k-w-300">
                                    <div class="col-md-12">
                                        @Html.TextBoxFor(m => m.sMarkasnewStartdate,new { @class = "form-control datetimepicker",@onchange="markstartChange()"})
                                        @Html.ValidationMessageFor(m => m.MarkasnewStartdate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2 marknews testClass">
                            @Html.LabelFor(m => m.MarkasnewEnddate, new { @class = "col-md-2" })
                            <div class="k-d-flex">
                                <div class="k-w-300">
                                    <div class="col-md-12">
                                        @Html.TextBoxFor(m => m.sMarkasnewEnddate,new { @class = "form-control datetimepicker",@onchange="markendChange()"})
                                        @Html.ValidationMessageFor(m => m.MarkasnewEnddate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Admincomment, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextAreaFor(m => m.Admincomment, new { @id = "Admincomment", @class = "form-control",@row="2" })
                                @Html.ValidationMessageFor(m => m.Admincomment, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="accordion">
                <div class="accordion-header" onclick="toggleAccordion(event)"><i class="fa fa-usd panel-icon"></i>&nbsp; Price</div>
                <div class="accordion-content">
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.Price, new { @class = "col-md-2 required" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Price, new { @id = "Price", @class = "form-control" ,@min="0",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                            @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="productaccordian" style="display:none;">
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.OldPrice, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.OldPrice, new { @id = "OldPrice", @class = "form-control" ,@type="number",@min="0",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.OldPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Productcost, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Productcost, new { @id = "Productcost", @class = "form-control" ,@type="number",@min="0",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Productcost, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsDisablebuybutton)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsDisablebuybutton)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsDisablewishlistbutton)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsDisablewishlistbutton)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsAvailableforpreorder)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsAvailableforpreorder)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2 availableforpreorder">
                            @Html.LabelFor(m => m.Preorderavailabilitystartdate, new { @class = "col-md-2" })
                            <div class="k-d-flex">
                                <div class="k-w-300">
                                    <div class="col-md-12 testClass">
                                        @Html.TextBoxFor(m => m.sPreorderavailabilitystartdate,new { @class = "form-control datetimepicker"})
                                        @Html.ValidationMessageFor(m => m.Preorderavailabilitystartdate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsCallforprice)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsCallforprice)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsUserentersprice)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsUserentersprice)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2 entersamount">
                            @Html.LabelFor(m => m.Minimumamount, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Minimumamount, new { @id = "Minimumamount", @class = "form-control" ,@type="number",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Minimumamount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2 entersamount">
                            @Html.LabelFor(m => m.Maximumamount, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Maximumamount, new { @id = "Maximumamount", @class = "form-control" ,@type="number",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Maximumamount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsBasepriceenabled)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsBasepriceenabled)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2 basepriceamounts">
                            @Html.LabelFor(m => m.Amountinproduct, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Amountinproduct, new { @id = "Amountinproduct", @class = "form-control" ,@type="number",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Amountinproduct, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2 basepriceamounts">
                            @Html.LabelFor(m => m.Unitofproduct, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.Unitofproduct,Model.Unitofproducts,new{@class = "form-control"})
                                @Html.ValidationMessageFor(m => m.Unitofproduct, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2 basepriceamounts">
                            @Html.LabelFor(m => m.Referenceamount, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Referenceamount, new { @id = "Referenceamount", @class = "form-control" ,@type="number",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Referenceamount, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2 basepriceamounts">
                            @Html.LabelFor(m => m.Referenceunit, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.Referenceunit,Model.Referenceunits,new{@class = "form-control"})
                                @Html.ValidationMessageFor(m => m.Referenceunit, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.DiscountID, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.ListBoxFor(model => model.DiscountID, Model.Discounts, new {@class="form-control select2 select2-hidden-accessible" , @style="width: 100%;"})
                                @Html.ValidationMessageFor(m => m.DiscountID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.IsTextexempt)
                        </div>
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.CheckBoxFor(m => m.IsTextexempt)
                            </div>
                        </div>
                    </div>
                    <div class="row mb-2" id="drptaxcategoryid">
                        @Html.LabelFor(m => m.Taxcategory, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.Taxcategory,Model.TaxCategories,new{@class = "form-control"})
                            @Html.ValidationMessageFor(m => m.Taxcategory, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2 productaccordian" style="display:none;">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.IsServices)
                        </div>
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.CheckBoxFor(m => m.IsServices)
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="accordion">
                <div class="accordion-header" onclick="toggleAccordion(event)"><i class="fa fa-truck panel-icon"></i> &nbsp;Shipping</div>
                <div class="accordion-content">
                    <div class="row mb-2">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.IsShippingEnable)
                        </div>
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.CheckBoxFor(m => m.IsShippingEnable)
                            </div>
                        </div>
                    </div>
                    <div class="productaccordian dvshipping" style="display:none;">
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Weight, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Weight, new { @id = "Weight", @class = "form-control" ,@type="number",@min="0",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Weight, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">

                            @Html.LabelFor(m => m.Length, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Length, new { @id = "Length", @class = "form-control" ,@type="number",@min="0",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Length, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Width, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Width, new { @id = "Width", @class = "form-control" ,@type="number",@min="0",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Width, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Height, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Height, new { @id = "Height", @class = "form-control" ,@type="number",@min="0",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Height, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsFreeshipping)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsFreeshipping)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsShipseparately)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsShipseparately)
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Additionalshippingcharge, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Additionalshippingcharge, new { @id = "Additionalshippingcharge", @class = "form-control" ,@type="number",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Additionalshippingcharge, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.DeliverydateID, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.DeliverydateID,Model.Deliverydates,new{@class = "form-control",@id="DeliverydateID"})
                                @Html.ValidationMessageFor(m => m.DeliverydateID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="accordion">
                <div class="accordion-header" onclick="toggleAccordion(event)"><i class="fa fa-sitemap panel-icon"></i> &nbsp; Inventory</div>
                <div class="accordion-content">
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.InventoryMethod, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.InventoryMethod,Model.InventoryMethods,new{@class = "form-control",@id="InventoryMethod",@onchange="InventoryChange();"})
                            @Html.ValidationMessageFor(m => m.InventoryMethod, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2 multiplecheck" id="stockID" style="display: none;">
                        @Html.LabelFor(m => m.StockQuantity, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.StockQuantity, new { @id = "StockQuantity", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                            @Html.ValidationMessageFor(m => m.StockQuantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="productaccordian" style="display:none;">
                        <div class="row mb-2 multiplecheck">
                            @Html.LabelFor(m => m.WarehouseID, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.WarehouseID,Model.Warehouses,new{@class = "form-control",@id="WarehouseID"})
                                @Html.ValidationMessageFor(m => m.WarehouseID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="trackclass" style="display:none;">
                            <div class="row mb-2">
                                <div class="col-md-2">
                                    @Html.LabelFor(m => m.IsMultiplewarehouses)
                                </div>
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        @Html.CheckBoxFor(m => m.IsMultiplewarehouses)
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-md-2">
                                    @Html.LabelFor(m => m.IsDisplayavailability)
                                </div>
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        @Html.CheckBoxFor(m => m.IsDisplayavailability)
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-2" id="displaystockID" @*style="display: none;"*@>
                                @Html.LabelFor(m => m.Displaystockquantity, new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(m => m.Displaystockquantity, new { @id = "Displaystockquantity", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                                    @Html.ValidationMessageFor(m => m.Displaystockquantity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row mb-2">
                                @Html.LabelFor(m => m.Minimumstockqty, new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(m => m.Minimumstockqty, new { @id = "Minimumstockqty", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                                    @Html.ValidationMessageFor(m => m.Minimumstockqty, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row mb-2">
                                @Html.LabelFor(m => m.Lowstockactivity, new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.Lowstockactivity,Model.Lowstockactivities,new{@class = "form-control",@id="Lowstockactivity"})
                                    @Html.ValidationMessageFor(m => m.Lowstockactivity, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row mb-2">
                                @Html.LabelFor(m => m.Notifyforqtybelow, new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.TextBoxFor(m => m.Notifyforqtybelow, new { @id = "Notifyforqtybelow", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                                    @Html.ValidationMessageFor(m => m.Notifyforqtybelow, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row mb-2">
                                @Html.LabelFor(m => m.Backorders, new { @class = "col-md-2" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(m => m.Backorders,Model.BackordersList,new{@class = "form-control",@id="Backorders"})
                                    @Html.ValidationMessageFor(m => m.Backorders, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="row mb-2">
                                <div class="col-md-2">
                                    @Html.LabelFor(m => m.IsAllowbackinstocksubscriptions)
                                </div>
                                <div class="col-md-10">
                                    <div class="checkbox">
                                        @Html.CheckBoxFor(m => m.IsAllowbackinstocksubscriptions)
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Minimumcartqty, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Minimumcartqty, new { @id = "Minimumcartqty", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Minimumcartqty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Maximumcartqty, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Maximumcartqty, new { @id = "Maximumcartqty", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Maximumcartqty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            @Html.LabelFor(m => m.Allowedquantities, new { @class = "col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(m => m.Allowedquantities, new { @id = "Allowedquantities", @class = "form-control",@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                                @Html.ValidationMessageFor(m => m.Allowedquantities, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-2">
                                @Html.LabelFor(m => m.IsNotreturnable)
                            </div>
                            <div class="col-md-10">
                                <div class="checkbox">
                                    @Html.CheckBoxFor(m => m.IsNotreturnable)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
           @* <div class="accordion">
                <div class="accordion-header" onclick="toggleAccordion(event)">Pictures</div>
                <div class="accordion-content">
                    <p>You need to save the product before you can upload pictures for this product page.</p>
                </div>
            </div>
*@
            <div class="accordion productaccordian" style="display:none;">
                <div class="accordion-header" onclick="toggleAccordion(event)">Gift card</div>
                <div class="accordion-content">
                    <div class="row mb-2">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.Isgiftcard)
                        </div>
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.CheckBoxFor(m => m.Isgiftcard)
                            </div>
                        </div>
                    </div>
                    <div class="row mb-2 giftcheck">
                        @Html.LabelFor(m => m.Giftcardtype, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.Giftcardtype,Model.GiftcardtypeList,new{@class = "form-control",@id="Giftcardtype"})
                            @Html.ValidationMessageFor(m => m.Giftcardtype, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2 giftcheck">
                        @Html.LabelFor(m => m.Giftcardamount, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Giftcardamount, new { @id = "Giftcardamount", @class = "form-control" ,@type="number",@min="0",@onkeydown="javascript: return event.keyCode == 69 ? false : true",@onblur="if(this.value==''){this.value=0;}"})
                            @Html.ValidationMessageFor(m => m.Giftcardamount, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="accordion productaccordian" style="display:none;">
                <div class="accordion-header" onclick="toggleAccordion(event)">Rental</div>
                <div class="accordion-content">
                    <div class="row mb-2">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.Isrental)
                        </div>
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.CheckBoxFor(m => m.Isrental)
                            </div>
                        </div>
                    </div>
                    <div class="row mb-2 rentalcheck">
                        @Html.LabelFor(m => m.Rentalperiodlength, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Rentalperiodlength, new { @id = "Rentalperiodlength", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                            @Html.ValidationMessageFor(m => m.Rentalperiodlength, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2 rentalcheck">
                        @Html.LabelFor(m => m.Rentalperiod, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.Rentalperiod,Model.RentalperiodList,new{@class = "form-control",@id="Rentalperiod"})
                            @Html.ValidationMessageFor(m => m.Rentalperiod, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="accordion productaccordian" style="display:none;">
                <div class="accordion-header" onclick="toggleAccordion(event)">Recurring product</div>
                <div class="accordion-content">
                    <div class="row mb-2">
                        <div class="col-md-2">
                            @Html.LabelFor(m => m.IsRecurringproduct)
                        </div>
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.CheckBoxFor(m => m.IsRecurringproduct)
                            </div>
                        </div>
                    </div>

                    <div class="row mb-2 recurringcheck">
                        @Html.LabelFor(m => m.Cyclelength, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Cyclelength, new { @id = "Cyclelength", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)",@onblur="if(this.value==''){this.value=0;}"})
                            @Html.ValidationMessageFor(m => m.Cyclelength, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2 recurringcheck">
                        @Html.LabelFor(m => m.Cycleperiod, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.Cycleperiod,Model.CycleperiodList,new{@class = "form-control",@id="Cycleperiod"})
                            @Html.ValidationMessageFor(m => m.Cycleperiod, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2 recurringcheck">
                        @Html.LabelFor(m => m.Totalcycles, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Totalcycles, new { @id = "Totalcycles", @class = "form-control" ,@type="number",@min="0",@onkeypress="return onlyNumberKey(event)" ,@onblur="if(this.value==''){this.value=0;}"})
                            @Html.ValidationMessageFor(m => m.Totalcycles, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="accordion productaccordian" style="display:none;">
                <div class="accordion-header" onclick="toggleAccordion(event)">SEO</div>
                <div class="accordion-content">
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.Searchenginefriendlypagename, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Searchenginefriendlypagename, new { @id = "Searchenginefriendlypagename", @class = "form-control",@autocomplete="off"})
                            @Html.ValidationMessageFor(m => m.Searchenginefriendlypagename, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.Metatitle, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Metatitle, new { @id = "Metatitle", @class = "form-control",@autocomplete="off"})
                            @Html.ValidationMessageFor(m => m.Metatitle, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.Metakeywords, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Metakeywords, new { @id = "Metakeywords", @class = "form-control",@autocomplete="off"})
                            @Html.ValidationMessageFor(m => m.Metakeywords, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row mb-2">
                        @Html.LabelFor(m => m.Metadescription, new { @class = "col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(m => m.Metadescription, new { @id = "Metadescription", @class = "form-control",@row="2"})
                            @Html.ValidationMessageFor(m => m.Metadescription, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
    @*  <script src="~/Plugins/Widgets.BasicPlugins/Scripts/js/jquery-3.2.1.min.js"></script>*@
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.min.js"></script>
    <script src="https://cdn.tiny.cloud/1/qagffr3pkuv17a8on1afax661irst1hbr4e6tbv888sz91jc/tinymce/5-stable/tinymce.min.js" referrerpolicy="origin"></script>
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.js"></script>
    <script src="https://kendo.cdn.telerik.com/2023.1.117/js/kendo.all.min.js"></script>
    <script src="https://kendo.cdn.telerik.com/2023.1.117/js/kendo.aspnetmvc.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.13.2/jquery-ui.min.js" integrity="sha512-57oZ/vW8ANMjR/KQ6Be9v/+/h6bq9/l3f0Oc7vn6qMqyhvPd1cvKBRWWpzu0QoneImqr2SkmO4MSqU+RpHom3Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/caret/1.3.7/jquery.caret.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tag-editor/1.0.20/jquery.tag-editor.min.js" integrity="sha512-wexRM3SVzXnR9XDRR32JUDTyDZP3XGAsrsbVl+rBMupJsHZqbUCBMxVHDDzCpvKVhJqerRYoInsRA2ySEzpYLg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    @*    <script src="https://cdnjs.cloudflare.com/ajax/libs/tag-editor/1.0.20/jquery.tag-editor.js" integrity="sha512-Q97Wbo3X93J1a+cM+MftacnX5zhx2iPbw68tM6HFo44un46h3NojL8aKW+jFTplOu5YhfctmSd6OPBnd0NdC6w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    *@
    <script>
        //var switchStatus = false;
        //$("#togbutton").on('change', function () {
        //    if ($(this).is(':checked')) {
        //        debugger;
        //        switchStatus = $(this).is(':checked');
        //        if (switchStatus == false) {
        //            $(".productaccordian").hide();
        //        }
        //        else {
        //            $(".productaccordian").show();
        //        }
        //    }
        //    else {
        //        debugger;
        //        switchStatus = $(this).is(':checked');
        //        if (switchStatus == false) {
        //            $(".productaccordian").hide();
        //        }
        //        else {
        //            $(".productaccordian").show();
        //        }
        //        //alert(switchStatus);// To verify
        //    }
        //});
        $(document).ready(function () { $("#Price").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 USD" }) });
        //$(document).ready(function () { $("#OldPrice").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 USD" }) });
        //$(document).ready(function () { $("#Productcost").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 USD" }) });
        //$(document).ready(function () { $("#Minimumamount").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 USD" }) });
        //$(document).ready(function () { $("#Maximumamount").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 USD" }) });
        //$(document).ready(function () { $("#Amountinproduct").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000" }) });
        //$(document).ready(function () { $("#Referenceamount").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000" }) });
        //$(document).ready(function () { $("#Weight").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 lb(s)" }) });
        //$(document).ready(function () { $("#Length").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 inch(es)" }) });
        //$(document).ready(function () { $("#Width").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 inch(es)" }) });
        //$(document).ready(function () { $("#Height").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 inch(es)" }) });
        //$(document).ready(function () { $("#Additionalshippingcharge").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 USD" }) });
        //$(document).ready(function () { $("#Giftcardamount").kendoNumericTextBox({ min: 0, max: 99999999.9999, decimals: 2, restrictDecimals: !0, format: "#.0000 " }) });
        function Checkvalidate() {
            var flag = true;
            var pname = $("#ProductName").val();
            if (pname.trim().length == 0) {
                $(".pnameerror").text("Only white space not allowed.");
                $("#ProductName").val("");
                flag = true;
            }
            return flag;
        }
        tinymce.init({
            selector: '#FullDescription',
            plugins: [
                'advlist', 'autolink', 'link', 'image', 'lists', 'charmap', 'preview',
                'anchor', 'pagebreak',
                'searchreplace', 'wordcount', 'visualblocks', 'visualchars', 'code',
                'fullscreen', 'insertdatetime',
                'media', 'table', 'emoticons', 'template', 'help'
            ],
            height: 400
        });
        $('#Producttags').tagEditor({
            autocomplete: {
                delay: 0, // show suggestions immediately
                position: { collision: 'flip' }, // automatic menu position up/down
                source: ["nice", "gift", "cool", "apparel", "shirt", "computer", "shoes", "awesome", "compact", "book", "jewelry", "cell", "camera", "jeans", "game", "digital", "Apple"],
            },
            placeholder: 'Enter tags ...'
        });
        //$(document).ready(function () {
        //    var presentDate = new Date();
        //    // create DateTimePicker from input HTML element
        //    $(".datetimepicker").kendoDateTimePicker({
        //        format:"MM/dd/yyyy hh:mm tt", 
        //        min: presentDate,
        //        popup: {
        //            position: "bottom right", origin: "top right"
        //        }
        //    });
        //    var switchStatus = false;

        //    switchStatus = $("#togbutton").is(':checked');
        //    if (switchStatus == false) {
        //        $(".productaccordian").hide();
        //    }
        //    else {
        //        $(".productaccordian").show();
        //    }

        //});
        //$(document).ready(function () { $("#Minimumstockqty").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        //$(document).ready(function () { $("#Notifyforqtybelow").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        //$(document).ready(function () { $("#Minimumcartqty").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        //$(document).ready(function () { $("#Maximumcartqty").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        //$(document).ready(function () { $("#Rentalperiodlength").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        //$(document).ready(function () { $("#Totalcycles").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        //$(document).ready(function () { $("#Cyclelength").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        //$(document).ready(function () { $("#Displayorder").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        //$(document).ready(function () { $("#Allowedquantities").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        $(document).ready(function () { $("#StockQuantity").kendoNumericTextBox({ min: 0, max: 99999999, decimals: 0, restrictDecimals: !0, format: "# " }) });
        // JavaScript to toggle the accordion
        function toggleAccordion(event) {
            var accordionHeader = event.target;
            var accordionContent = accordionHeader.nextElementSibling;
            accordionHeader.classList.toggle("active");
            if (accordionContent.style.display === "block") {
                accordionContent.style.display = "none";
            } else {
                accordionContent.style.display = "block";
            }
        }
        $('.select2').select2({
            closeOnSelect: false
        });
        $(document).ready(function () {
            if ($("#IsTextexempt").is(":checked")) {
                $("#drptaxcategoryid").hide();
            } else {
                $("#drptaxcategoryid").show();
            }
            var InventoryMethod = $('#InventoryMethod').val();

            if (InventoryMethod == 1)
                $("#stockID").show();
            else
                $("#stockID").hide();
            //if ($("#IsShowOnHomepage").is(":checked")) {
            //    $("#DisplayorderID").show();
            //} else {
            //    $("#DisplayorderID").hide();
            //}
            //if ($("#IsMarkasnew").is(":checked")) {
            //    $(".marknews").show();
            //} else {
            //    $(".marknews").hide();
            //}
            //if ($("#IsAvailableforpreorder").is(":checked")) {
            //    $(".availableforpreorder").show();
            //} else {
            //    $(".availableforpreorder").hide();
            //}
            //if ($("#IsUserentersprice").is(":checked")) {
            //    $(".entersamount").show();
            //} else {
            //    $(".entersamount").hide();
            //}
            //if ($("#IsBasepriceenabled").is(":checked")) {
            //    $(".basepriceamounts").show();
            //} else {
            //    $(".basepriceamounts").hide();
            //}
            //switchStatus = $("#togbutton").is(':checked');

            //if ($("#IsShippingEnable").is(":checked") && switchStatus != false) {
            //    $(".dvshipping").show();
            //} else {
            //    $(".dvshipping").hide();
            //}
            //if ($("#Isgiftcard").is(":checked")) {
            //    $(".giftcheck").show();
            //} else {
            //    $(".giftcheck").hide();
            //}
            //if ($("#Isrental").is(":checked")) {
            //    $(".rentalcheck").show();
            //} else {
            //    $(".rentalcheck").hide();
            //}
            //if ($("#IsRecurringproduct").is(":checked")) {
            //    $(".recurringcheck").show();
            //} else {
            //    $(".recurringcheck").hide();
            //}
        });
        $(function () {
            $("#IsTextexempt").click(function () {
                if ($(this).is(":checked")) {
                    $("#drptaxcategoryid").hide();
                } else {
                    $("#drptaxcategoryid").show();
                }
            });
        });
        //$(function () {
        //    $("#IsShowOnHomepage").click(function () {
        //        if ($(this).is(":checked")) {
        //            $("#DisplayorderID").show();
        //        } else {
        //            $("#DisplayorderID").hide();
        //        }
        //    });
        //});
        //$(function () {
        //    $("#IsMarkasnew").click(function () {
        //        if ($(this).is(":checked")) {
        //            $(".marknews").show();
        //        } else {
        //            $(".marknews").hide();
        //        }
        //    });
        //});
        //$(function () {
        //    $("#IsAvailableforpreorder").click(function () {
        //        if ($(this).is(":checked")) {
        //            $(".availableforpreorder").show();
        //        } else {
        //            $(".availableforpreorder").hide();
        //        }
        //    });
        //});
        //$(function () {
        //    $("#IsUserentersprice").click(function () {
        //        if ($(this).is(":checked")) {
        //            $(".entersamount").show();
        //        } else {
        //            $(".entersamount").hide();
        //        }
        //    });
        //});
        //$(function () {
        //    $("#IsBasepriceenabled").click(function () {
        //        if ($(this).is(":checked")) {
        //            $(".basepriceamounts").show();
        //        } else {
        //            $(".basepriceamounts").hide();
        //        }
        //    });
        //});
        //$(function () {
        //    $("#IsMultiplewarehouses").click(function () {
        //        if ($(this).is(":checked")) {
        //            $(".multiplecheck").hide();
        //        } else {
        //            $(".multiplecheck").show();
        //        }
        //    });
        //});
        //$(function () {
        //    $("#Isgiftcard").click(function () {
        //        if ($(this).is(":checked")) {
        //            $(".giftcheck").show();
        //        } else {
        //            $(".giftcheck").hide();
        //        }
        //    });
        //});
        //$(function () {
        //    $("#Isrental").click(function () {
        //        if ($(this).is(":checked")) {
        //            $(".rentalcheck").show();
        //        } else {
        //            $(".rentalcheck").hide();
        //        }
        //    });
        //});
        //$(function () {
        //    $("#IsRecurringproduct").click(function () {
        //        if ($(this).is(":checked")) {
        //            $(".recurringcheck").show();
        //        } else {
        //            $(".recurringcheck").hide();
        //        }
        //    });
        //});
        //$(function () {
        //    //var switchStatus = false;

        //    switchStatus = $("#togbutton").is(':checked');
        //    console.log(switchStatus);
        //    $("#IsShippingEnable").click(function () {
        //        if ($(this).is(":checked") && switchStatus != false) {
        //            $(".dvshipping").show();
        //        } else {
        //            $(".dvshipping").hide();
        //        }
        //    });
        //});
        function InventoryChange() {
            var InventoryMethod = $('#InventoryMethod').val();
           // switchStatus = $("#togbutton").is(':checked');
            if (InventoryMethod == 1)
                $("#stockID").show();
            else if (InventoryMethod != 1 && switchStatus == false)
                $("#stockID").hide();

            //if (InventoryMethod == 1 && switchStatus != false) {
            //    $(".trackclass").show();
            //}
            //else if (switchStatus != false && InventoryMethod != 1) {
            //    $(".trackclass").hide();
            //}
        }
        function onlyNumberKey(evt) {
            var ASCIICode = (evt.which) ? evt.which : evt.keyCode
            if (ASCIICode > 31 && (ASCIICode < 48 || ASCIICode > 57))
                return false;
            return true;
        }

        function startChange() {
            var endPicker = $("#Availableenddate").data("kendoDateTimePicker"),
                startDate = $("#Availablestartdate").val();
            debugger;
            if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate() + 1);
                endPicker.min(startDate);
                debugger;
                var endDateValue = endPicker.value();
                if (startDate > endDateValue) {
                    debugger;
                    var validator = $("#Availablestartdate").kendoValidator({
                        rules:
                        {
                            datepicker: function (input) {
                                var stDate = $("#Availablestartdate").data("kendoDateTimePicker").val();
                                var enDate = $("#Availableenddate").data("kendoDateTimePicker").val();
                                if (stDate > enDate) {
                                    debugger;
                                    return false;
                                } else {
                                    return true;
                                }
                            }
                        },
                        messages: {
                            datepicker: "Start Date Should be less than End Date!"
                        }
                    }).data("kendoValidator");
                }
            }
        }
        function endChange() {
            var startPicker = $("#Availablestartdate").data("kendoDateTimePicker"),
                endDate = $("#Availableenddate").val();
            if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate() - 1);
                startPicker.max(endDate);
                debugger;
                var startDateValue = startPicker.value();
                if (startDateValue > endDate) {
                    debugger;
                    var validator = $("#Availableenddate").kendoValidator({
                        rules: {
                            datepicker: function (input) {
                                var stDate = $("#Availablestartdate").data("kendoDateTimePicker").val();
                                var enDate = $("#Availableenddate").data("kendoDateTimePicker").val();
                                if (stDate > enDate) {
                                    debugger;
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            }
                        },
                        messages: {
                            datepicker: "End Date Should be greater than Start Date!"
                        }
                    }).data("kendoValidator");
                }
            }
        }
        function markstartChange() {
            var endPicker = $("#MarkasnewEnddate").data("kendoDateTimePicker"),
                startDate = $("#MarkasnewStartdate").val();
            debugger;
            if (startDate) {
                startDate = new Date(startDate);
                startDate.setDate(startDate.getDate() + 1);
                endPicker.min(startDate);
                debugger;
                var endDateValue = endPicker.value();
                if (startDate > endDateValue) {
                    debugger;
                    var validator = $("#MarkasnewStartdate").kendoValidator({
                        rules:
                        {
                            datepicker: function (input) {
                                var stDate = $("#MarkasnewStartdate").data("kendoDateTimePicker").val();
                                var enDate = $("#MarkasnewEnddate").data("kendoDateTimePicker").val();
                                if (stDate > enDate) {
                                    debugger;
                                    return false;
                                } else {
                                    return true;
                                }
                            }
                        },
                        messages: {
                            datepicker: "Start Date Should be less than End Date!"
                        }
                    }).data("kendoValidator");
                }
            }
        }
        function markendChange() {
            var startPicker = $("#MarkasnewStartdate").data("kendoDateTimePicker"),
                endDate = $("#MarkasnewEnddate").val();
            if (endDate) {
                endDate = new Date(endDate);
                endDate.setDate(endDate.getDate() - 1);
                startPicker.max(endDate);
                debugger;
                var startDateValue = startPicker.value();
                if (startDateValue > endDate) {
                    debugger;
                    var validator = $("#MarkasnewEnddate").kendoValidator({
                        rules: {
                            datepicker: function (input) {
                                var stDate = $("#MarkasnewStartdate").data("kendoDateTimePicker").val();
                                var enDate = $("#MarkasnewEnddate").data("kendoDateTimePicker").val();
                                if (stDate > enDate) {
                                    debugger;
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            }
                        },
                        messages: {
                            datepicker: "End Date Should be greater than Start Date!"
                        }
                    }).data("kendoValidator");
                }
            }
        }
    </script>
</body>
</html>